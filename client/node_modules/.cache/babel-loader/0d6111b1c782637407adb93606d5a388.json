{"ast":null,"code":"import { QueryObserver } from './queryObserver.mjs';\nimport { infiniteQueryBehavior, hasNextPage, hasPreviousPage } from './infiniteQueryBehavior.mjs';\n\nclass InfiniteQueryObserver extends QueryObserver {\n  // Type override\n  // Type override\n  // Type override\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(client, options) {\n    super(client, options);\n  }\n\n  bindMethods() {\n    super.bindMethods();\n    this.fetchNextPage = this.fetchNextPage.bind(this);\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this);\n  }\n\n  setOptions(options, notifyOptions) {\n    super.setOptions({ ...options,\n      behavior: infiniteQueryBehavior()\n    }, notifyOptions);\n  }\n\n  getOptimisticResult(options) {\n    options.behavior = infiniteQueryBehavior();\n    return super.getOptimisticResult(options);\n  }\n\n  fetchNextPage() {\n    let {\n      pageParam,\n      ...options\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.fetch({ ...options,\n      meta: {\n        fetchMore: {\n          direction: 'forward',\n          pageParam\n        }\n      }\n    });\n  }\n\n  fetchPreviousPage() {\n    let {\n      pageParam,\n      ...options\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.fetch({ ...options,\n      meta: {\n        fetchMore: {\n          direction: 'backward',\n          pageParam\n        }\n      }\n    });\n  }\n\n  createResult(query, options) {\n    var _state$data, _state$data2, _state$fetchMeta, _state$fetchMeta$fetc, _state$fetchMeta2, _state$fetchMeta2$fet;\n\n    const {\n      state\n    } = query;\n    const result = super.createResult(query, options);\n    return { ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, (_state$data = state.data) == null ? void 0 : _state$data.pages),\n      hasPreviousPage: hasPreviousPage(options, (_state$data2 = state.data) == null ? void 0 : _state$data2.pages),\n      isFetchingNextPage: state.fetchStatus === 'fetching' && ((_state$fetchMeta = state.fetchMeta) == null ? void 0 : (_state$fetchMeta$fetc = _state$fetchMeta.fetchMore) == null ? void 0 : _state$fetchMeta$fetc.direction) === 'forward',\n      isFetchingPreviousPage: state.fetchStatus === 'fetching' && ((_state$fetchMeta2 = state.fetchMeta) == null ? void 0 : (_state$fetchMeta2$fet = _state$fetchMeta2.fetchMore) == null ? void 0 : _state$fetchMeta2$fet.direction) === 'backward'\n    };\n  }\n\n}\n\nexport { InfiniteQueryObserver };","map":{"version":3,"mappings":";;;AAuBO,MAAMA,qBAAN,SAMGC,aANH,CAYL;AACA;AAKA;AAGA;AAKA;AACAC,aAAW,CACTC,MADS,EAETC,OAFS,EAST;AACA,UAAMD,MAAN,EAAcC,OAAd;AACD;;AAESC,aAAW,GAAS;AAC5B,UAAMA,WAAN;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBD,IAAvB,CAA4B,IAA5B,CAAzB;AACD;;AAEDE,YAAU,CACRL,OADQ,EAQRM,aARQ,EASF;AACN,UAAMD,UAAN,CACE,EACE,GAAGL,OADL;AAEEO,cAAQ,EAAEC,qBAAqB;AAFjC,KADF,EAKEF,aALF;AAOD;;AAEDG,qBAAmB,CACjBT,OADiB,EAQ2B;AAC5CA,WAAO,CAACO,QAARP,GAAmBQ,qBAAqB,EAAxCR;AACA,WAAO,MAAMS,mBAAN,CAA0BT,OAA1B,CAAP;AAID;;AAEDE,eAAa,GAEX;AAAA,QAFY;AAAEQ,eAAF;AAAa,SAAGV;AAAhB,KAEZ,uEAF8D,EAE9D;AACA,WAAO,KAAKW,KAAL,CAAW,EAChB,GAAGX,OADa;AAEhBY,UAAI,EAAE;AACJC,iBAAS,EAAE;AAAEC,mBAAS,EAAE,SAAb;AAAwBJ;AAAxB;AADP;AAFU,KAAX,CAAP;AAMD;;AAEDN,mBAAiB,GAKf;AAAA,QALgB;AAChBM,eADgB;AAEhB,SAAGV;AAFa,KAKhB,uEAF4B,EAE5B;AACA,WAAO,KAAKW,KAAL,CAAW,EAChB,GAAGX,OADa;AAEhBY,UAAI,EAAE;AACJC,iBAAS,EAAE;AAAEC,mBAAS,EAAE,UAAb;AAAyBJ;AAAzB;AADP;AAFU,KAAX,CAAP;AAMD;;AAESK,cAAY,CACpBC,KADoB,EAEpBhB,OAFoB,EASwB;AAAA;;AAC5C,UAAM;AAAEiB;AAAF,QAAYD,KAAlB;AACA,UAAME,MAAM,GAAG,MAAMH,YAAN,CAAmBC,KAAnB,EAA0BhB,OAA1B,CAAf;AACA,WAAO,EACL,GAAGkB,MADE;AAELhB,mBAAa,EAAE,KAAKA,aAFf;AAGLE,uBAAiB,EAAE,KAAKA,iBAHnB;AAILe,iBAAW,EAAEA,WAAW,CAACnB,OAAD,iBAAUiB,KAAK,CAACG,IAAhB,qBAAUC,WAAYC,MAAtB,CAJnB;AAKLC,qBAAe,EAAEA,eAAe,CAACvB,OAAD,kBAAUiB,KAAK,CAACG,IAAhB,qBAAUI,YAAYF,MAAtB,CAL3B;AAMLG,wBAAkB,EAChBR,KAAK,CAACS,WAANT,KAAsB,UAAtBA,IACA,0BAAK,CAACU,SAAN,KAAiBd,IAAjB,GAAiBA,MAAjB,GAAiBA,wDAAWC,IAAXD,GAAWC,MAAXD,GAAWC,+BAA5B,MAA0C,SARvC;AASLc,4BAAsB,EACpBX,KAAK,CAACS,WAANT,KAAsB,UAAtBA,IACA,2BAAK,CAACU,SAANV,gEAAiBJ,SAAjB,2CAA4BC,SAA5B,MAA0C;AAXvC,KAAP;AAaD;;AAvHD","names":["InfiniteQueryObserver","QueryObserver","constructor","client","options","bindMethods","fetchNextPage","bind","fetchPreviousPage","setOptions","notifyOptions","behavior","infiniteQueryBehavior","getOptimisticResult","pageParam","fetch","meta","fetchMore","direction","createResult","query","state","result","hasNextPage","data","_state$data","pages","hasPreviousPage","_state$data2","isFetchingNextPage","fetchStatus","fetchMeta","isFetchingPreviousPage"],"sources":["C:\\Users\\vaibh\\OneDrive\\Desktop\\college\\web devlopment\\youtube2022-social-app\\client\\node_modules\\@tanstack\\query-core\\src\\infiniteQueryObserver.ts"],"sourcesContent":["import type {\n  DefaultedInfiniteQueryObserverOptions,\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n  QueryKey,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions, ObserverFetchOptions } from './queryObserver'\nimport { QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport type { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>,\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  InfiniteData<TData>,\n  InfiniteData<TQueryData>,\n  TQueryKey\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>,\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions: ObserverFetchOptions,\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    super.setOptions(\n      {\n        ...options,\n        behavior: infiniteQueryBehavior(),\n      },\n      notifyOptions,\n    )\n  }\n\n  getOptimisticResult(\n    options: DefaultedInfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage({ pageParam, ...options }: FetchNextPageOptions = {}): Promise<\n    InfiniteQueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'forward', pageParam },\n      },\n    })\n  }\n\n  fetchPreviousPage({\n    pageParam,\n    ...options\n  }: FetchPreviousPageOptions = {}): Promise<\n    InfiniteQueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'backward', pageParam },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, InfiniteData<TQueryData>, TQueryKey>,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const result = super.createResult(query, options)\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data?.pages),\n      hasPreviousPage: hasPreviousPage(options, state.data?.pages),\n      isFetchingNextPage:\n        state.fetchStatus === 'fetching' &&\n        state.fetchMeta?.fetchMore?.direction === 'forward',\n      isFetchingPreviousPage:\n        state.fetchStatus === 'fetching' &&\n        state.fetchMeta?.fetchMore?.direction === 'backward',\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}